openapi: 3.0.1
info:
  title: Group Events API
  description: This is a simple API for managing events
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:8000
security:
  - bearerAuth: []
tags:
  - name: Players
  - name: Games
  - name: Sessions
  - name: Genres

paths:
  /players:
    get:
      tags:
        - Players
      summary: Resource that gets all players.
      description: Get all players.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: username
          required: true
          in: query
          description: Player username
          schema:
            type: string
            example: exampleusername
        - name: skip
          in: query
          description: Number of players to skip
          schema:
            $ref: "#/components/schemas/skip"
        - name: limit
          in: query
          description: Number of players to return
          schema:
            $ref: "#/components/schemas/limit"
      responses:
        200:
          description: Got all players from database.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListResponse"
        400:
          $ref: "#/components/responses/400BadRequest"
    post:
      tags:
        - Players
      summary: Resource that creates a new player.
      description: Creates a new player.
      security:
        - bearerAuth: []
      requestBody:
        description: User to be created
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/PlayerCreate"
      responses:
        201:
          description: Player created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerCreate"
        400:
          $ref: "#/components/responses/400BadRequest"
    description: Resource that handles players.
  /players/{playerID}:
    get:
      tags:
        - Players
      summary: Resource that gets a player by ID.
      description: Get a player by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: playerId
          in: path
          description: Player ID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Got the player with identifier {PlayerId}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerDetail"
        404:
          $ref: "#/components/responses/404NotFound"
  /games:
    description: Resources that handles games.
    get:
      tags:
        - Games
      summary: Resource that gets all games in the database.
      description: Get all games from database.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Game name
          schema:
            type: string
            example: game1
        - name: genres
          in: query
          description: Game genres
          schema:
            type: array
            items:
              type: integer
          example: [genre1, genre2, genre3, ...]
        - name: developer
          in: query
          description: Game developer
          schema:
            type: string
            example: developer1
        - name: skip
          in: query
          description: Number of games to skip
          schema:
            $ref: "#/components/schemas/skip"
        - name: limit
          in: query
          description: Number of games to return
          schema:
            $ref: "#/components/schemas/limit"
      responses:
        200:
          description: Got all games from database.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameListResponse"
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
    post:
      tags:
        - Games
      summary: Resource that creates a new game
      description: Creates a new game in the database
      security:
        - bearerAuth: []
      requestBody:
        description: Game to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameCreate"
      responses:
        201:
          description: Game created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameCreateResponse'
        400:
          $ref: "#/components/responses/400BadRequest"
        409:
          $ref: "#/components/responses/409AlreadyExists"
  /games/{gameID}:
    description: Resources that handle games by ID
    get:
      tags:
        - Games
      summary: Get a game given its ID
      security:
        - bearerAuth: []
      parameters:
        - name : gameID
          in: path
          description: ID of game
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Got game matching the given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameDetails"
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /sessions:
    description: Resource that handles sessions
    get:
      tags:
        - Sessions
      summary: Get sessions that match the given parameters
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: query
          description: ID of the game in session
          schema:
            type: integer
            example: 1
        - name: date
          in: query
          description: Date(ms since January 1st 1970) of the session
          schema:
            type: integer
            minimum: 0
            example: 9765643234
        - name: state
          in: query
          description: State of the session
          schema:
            type: boolean
            example: true
        - name: player
          in: query
          description: Username of a player in session
          schema:
            type: string
            example: John_Doe
        - name: host
          in: query
          description: Host ID
          schema:
            type: integer
            minimum: 1
        - name: skip
          in: query
          description: Number of sessions to skip
          schema:
              $ref: "#/components/schemas/skip"
        - name: limit
          in: query
          description: Number of sessions to return
          schema:
            $ref: "#/components/schemas/limit"
      responses:
        200:
          description: Got sessions that match the given parameteres
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionListResponse"
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
    post:
      tags:
        - Sessions
      summary: Create a new session
      security:
        - bearerAuth: []
      requestBody:
          description: Session to be created
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/SessionCreate"
      responses:
        201:
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionCreateResponse"
        400:
          $ref: "#/components/responses/400BadRequest"
  /sessions/{sessionId}:
    description: Resource that handles sessions given their ID
    get:
      tags:
        - Sessions
      summary: Gets a session given its ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sessionId
          in: path
          description: ID of the session
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Got session matching the given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDetails"
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
    post:
      tags:
        - Sessions
      summary: Adds a player to a session
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sessionId
          in: path
          description: ID of the session
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Player to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                playerId:
                  type: integer
                  minimum: 1
                  example: 5432
      responses:
        200:
          description: A player was successfully added
          content:
            application/json:
              schema:
                type: string
                example: "Added player to session successfully"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
        409:
          $ref: "#/components/responses/409AlreadyExists"
    put:
      tags:
        - Sessions
      summary: Updates a session
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sessionId
          in: path
          description: ID of the session
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Session to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionUpdate"
      responses:
        200:
          description: Session was updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionUpdate"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
        - Sessions
      summary: Deletes a session
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sessionId
          in: path
          description: ID of the session
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        204:
          description: Session was deleted successfully
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
  /sessions/{sessionId}/players/{playerId}:
    delete:
      tags:
        - Sessions
      summary: Removes player from session
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          description: ID of the session
          required: true
          schema:
            type: integer
            minimum: 1
        - name: playerId
          in: path
          description: ID of the player
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        204:
          description: Session was deleted successfully
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
  /genres:
    get:
      tags:
        - Genres
      summary: Get all genres
      security:
        - bearerAuth: []
      responses:
        200:
          description: Got all genres successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenresListResponse"
        401:
          $ref: "#/components/responses/401Unauthorized"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    limit:
        type: integer
        minimum: 0
        example: 30
    skip:
        type: integer
        minimum: 0
        example: 0
    PlayerListElement:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
    PlayerListResponse:
      required:
        - players
        - hasNext
        - hasPrevious
        - total
      type: object
      properties:
        players:
          type: array
          items:
              $ref: "#/components/schemas/PlayerListElement"
        hasNext:
          type: boolean
          example: true
        hasPrevious:
          type: boolean
          example: false
        total:
            type: integer
            minimum: 0
            example: 1
    PlayerResponse:
      required:
        - id
        - token
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 2343
        token:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
    PlayerCreate:
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: johnDoe@gmail.com
        password:
            type: string
            example: john@Doe@123
    PlayerDetail:
      required:
        - id
        - name
        - email
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johnDoe@gmail.com
    GameResponse:
        required:
            - id
            - name
            - developer
        type: object
        properties:
            id:
              type: integer
              minimum: 1
              example: 1
            name:
              type: string
              example: game1
            developer:
              type: string
              example: developer1
    GameListResponse:
      required:
        - games
        - hasNext
        - hasPrevious
        - total
      type: object
      properties:
        games:
          type: array
          items:
            $ref: "#/components/schemas/GameResponse"
        hasNext:
          type: boolean
          example: true
        hasPrevious:
          type: boolean
          example: false
        total:
          type: integer
          minimum: 0
          example: 1
    GameCreate:
        required:
            - name
            - developer
            - genres
        type: object
        properties:
            name:
              type: string
              example: game1
            developer:
              type: string
              example: developer1
            genres:
              type: array
              items:
                  type: integer
              example: [1, 2, 3]
    GameCreateResponse:
        required:
            - id
        type: object
        properties:
            id:
              type: integer
              minimum: 1
              example: 1
    GameDetails:
        required:
            - id
            - name
            - developer
            - genres
        type: object
        properties:
            id:
              type: integer
              minimum: 1
              example: 1
            name:
              type: string
              example: game1
            developer:
              type: string
              example: developer1
            genres:
              type: array
              items:
                  $ref: "#/components/schemas/GenreDetail"
    GameResponseMinimized:
        required:
            - id
            - name
        type: object
        properties:
            id:
              type: integer
              minimum: 1
              example: 1
            name:
              type: string
              example: game1
    SessionCreate:
        required:
            - gameId
            - capacity
            - startingDate
        type: object
        properties:
            gameId:
              type: integer
              minimum: 1
              example: 1
            startingDate:
              type: string
              format: date-time
              example: "07/03/2024 17:48:00"
            capacity:
              type: integer
              minimum: 2
              maximum: 32
              example: 31
    SessionListResponse:
      required:
        - sessions
        - hasNext
        - hasPrevious
        - total
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: "#/components/schemas/SessionResponse"
        hasNext:
          type: boolean
          example: true
        hasPrevious:
          type: boolean
          example: false
        total:
          type: integer
          minimum: 0
          example: 1
    SessionResponse:
      required:
        - id
        - game
        - currentCapacity
        - capacity
        - date
        - isOpen
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 1
        game:
          $ref: "#/components/schemas/GameResponseMinimized"
        currentCapacity:
          type: integer
          minimum: 0
          maximum: 32
          example: 30
        capacity:
          type: integer
          minimum: 2
          maximum: 32
          example: 31
        date:
          type: string
          format: date-time
          example: "07/03/2024 17:48:00"
        isOpen:
          type: boolean
          example: true
    SessionCreateResponse:
        required:
            - id
        type: object
        properties:
            id:
              type: integer
              minimum: 1
              example: 1
    SessionDetails:
        required:
            - id
            - game
            - host
            - capacity
            - date
            - players
            - isOpen
        type: object
        properties:
            id:
              type: integer
              minimum: 1
              example: 75643
            game:
              $ref: "#/components/schemas/GameResponseMinimized"
            host:
              type: integer
              minimum: 1
              example: 432
            capacity:
              type: integer
              minimum: 2
              maximum: 32
              example: 23
            date:
              type: string
              format: date-time
              example: "02/05/2023 11:38:05"
            players:
              type: array
              items:
                $ref: "#/components/schemas/PlayerDetail"
            isOpen:
              type: boolean
              example: true
    SessionUpdate:
        required:
            - capacity
            - startingDate
        type: object
        properties:
            capacity:
              type: integer
              minimum: 2
              maximum: 32
              example: 23
            startingDate:
              type: integer
              example: 6453424623
    GenresListResponse:
      required:
        - genres
        - total
      type: object
      properties:
        genres:
          type: array
          items:
            $ref: "#/components/schemas/GenreDetail"
        total:
            type: integer
            minimum: 0
            example: 1
    GenreDetail:
      required:
        - genreId
        - name
      type: object
      properties:
        genreId:
          type: integer
          minimum: 1
          example: 2432
        name:
          type: string
          example: Genre1
    AlreadyExists:
      type: object
      properties:
        error:
          type: string
          example: "Already exists in the system"
        code:
          type: integer
          default: 6
    MissingParameter:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
        code:
          type: integer
          default: 5

    InvalidBody:
      type: object
      properties:
        error:
          type: string
          example: "Invalid body content"
        code:
          type: integer
          default: 1
    NotFound:
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "/item/1"
        error:
          type: string
          example: " id 1 not found"
        code:
          type: integer
          default: 2
    ServerError:
      type: object
      properties:
        error:
          type: string
          example: "Error related to the server "
    Gateway:
      type: object
      properties:
        error:
          type: string
          example: "Wrong gateway, please check your PORT"
    Success:
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "Done with Success"
        description:
          type: string
          example: "Done"
    Unauthorized:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized token
        code:
          type: integer
          default: 4

  responses:
    401Unauthorized:
      description: Missing or invalid authentication token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Unauthorized"
    404NotFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"

    400BadRequest:
      description: "Invalid Request because of a missing Parameter or invalid body content"
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/MissingParameter"
              - $ref: "#/components/schemas/InvalidBody"

    409AlreadyExists:
      description: "Invalid Request because there is one already in the system"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AlreadyExists"

    500ServerError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerError"

    502GatewayProblem:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Gateway"
